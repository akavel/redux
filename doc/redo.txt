#DESCRIPTION

This command can be invoked as `redux redo` or, through a symlink, as `redo`.

A redo target is produced by an sh script whose name has a '.do' file extension
and, as such, is called a do script.

For a given target named `target.ext`, the corresponding do file may be named,
in order of decreasing specificity, `target.ext.do`, `default.ext.do` or, finally, `default.do`.

Redo searches for each of these script files, in order of specificity, starting in the target's directory
and moving into parent directories. The search stops when a script is found or when the project
root directory has been unsuccessfully searched.

In the latter case, if the target file exists on disk, it is taken to be a source file,
not generated by script and its metadata is stored in the database.
The file will be subsequently watched for changes.

In the former case, where the script is found, it is assumed to be an sh script and executed with three arguments:

$1 = path to target, relative to do script directory 
$2 = basename of target without a suffix
$3 = temporary file name

The script is executed by /bin/sh with the current working directory (cwd) set to its directory
and with stdout opened to a temporary file (which is unnamed and different from $3).
It is normally expected to produce output on stdout or write to the file specified by its $3 parameter.
It is an error for a script to write to both outputs.

If the script completes successfuly, redo chooses the correct output, renames the temporary file
to the target file and updates its database with the new file's metadata record.
Since only one of the two temporary files can have content, redo has no trouble selecting the correct one.
Conversely, if neither file has content, then either is a valid candidate.

In the do file, which is an sh script, the line 

    redo-ifchange A B C

specifies the files A, B, and C as prerequisites for the target file.

Similarly, a call to 

    redo-ifcreate A

specifies that the target should be rebuilt when the non-existent file A appears or is deleted.

As a special case, a do file whose name is prefixed with '@' is run for
side effect.  redux does not create a temporary file when running such
a file and uses '/dev/stdout' as the output file name so its
output is visible but is otherwise not saved.
While the $3 parameter is provided for consistency, it is an error for a task script
to write to it since its output is discarded.

A call to redo without an argument will search for a file named `@all.do`
in the current directory.

A '@' prefixed task is analogous to a `.PHONY` target in make.
Any do file can also be run as a task by invoking 'redo' with the '-task' flag.
